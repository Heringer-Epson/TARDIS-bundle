#!/usr/bin/env python

from tardis.tardistools.compute_features import Analyse_Spectra
from tardis.tardistools.compute_features import Compute_Uncertainty

##
from tardis.tardistools.retrieve_observables_uncertainty_v10 import analyse_spectra
from tardis.tardistools.retrieve_observables_uncertainty_v10 import uncertainty
##

import numpy as np
import pandas as pd
import cPickle

class Analyse_Features(object):

    """This code appends spectral feature values to a pkl file.
    The pkl file might be newly generated by 'run_simulations' code, or pre-
    existing from a previous run. If the file is pre-existing, the features
    are re-computed.
    
    Parameters
    ----------
    subdir : ~str
        Subdirectory within 'INPUT_FILES/YML_FILES/' that contains
        the input parameter files to be simulated by TARDIS.
        
    created_ymlfiles_list : ~list
        Each entry in the list corresponds to the a created .yml file.
        
    run_uncertainties : ~boolean
        If True, computes the uncertainty of some spectra features.
                     
    smoothing_window : ~float
        Window to be used by the Savitzky-Golay filter to smooth the spectra.
        
    N_MC_runs : ~int
        Number of MC runs to be used to compute uncertainties.
        Only applicable if run_uncertainties is True.
        
    verbose : ~boolean
        Flag to whether or not print extra information.                                
                
    Output
    -------
    1) A .pkl file where spectral features have been added in addition to the
    spectrum.
    
    Files are acreated at
    './../INPUT_FILES/YML_FILES/'+subdir
    Where 'subdir' defined in the input file.                           
    """

    def __init__(self, subdir, created_ymlfiles_list,
                 run_uncertainties=True, smoothing_window=21,
                 N_MC_runs=3000, verbose=True):

        self.subdir = subdir
        self.input_dir = './../INPUT_FILES/YML_FILES/'+subdir
        self.output_dir = './../OUTPUT_FILES/'+subdir
        self.created_ymlfiles_list = created_ymlfiles_list
        self.verbose = verbose

        self.run_uncertainties = run_uncertainties
        self.smoothing_window = smoothing_window
        self.N_MC_runs = N_MC_runs 

        if self.verbose:
            print '----------------------------------------------------'
            print '---------------- COMPUTING FEATURES ----------------'
            print '----------------------------------------------------'
            print '\n' 
            
            print 'DESCRIPTION:'
            print '    Appends pEW, depth and velocity to the simulations.\n'
        
        self.get_features()
    
    def get_features(self):
        """Reads each .yml file generated by the master_run code and append
        a pEW, velocity and depth value to some spectral features. The
        spectral features are defined in the imported 'Analyse_Spectra' class.
        """ 
        for inpfile in self.created_ymlfiles_list:
            file_path = ('./../OUTPUT_FILES/' + self.subdir
                         + inpfile.split('.yml')[0]+'.pkl')
            with open(file_path, 'r+') as inp:
                pkl = cPickle.load(inp)

                #Check if features had been computed in a previous run.
                #If so, then wipe feature values to prevent the error where
                #the column already exists when adding a new column.
                if 'pEW_f7' in pkl.keys():
                    for key in pkl.keys():
                       
                        keys_minimal = [
                          'wavelength_raw', 'flux_raw','host_redshift',
                          't_rad', 'luminosity_requested', 'seed', 't_inner', 
                          'v_inner', 'v_outer', 'w', 'time_explosion', 
                          'density', 'r_outer', 'volume']

                        if key not in keys_minimal:
                            del pkl[key]
                
                #Perform feature analysis.
                pkl1 = Analyse_Spectra(pkl, smoothing_mode='savgol',
                            smoothing_window=self.smoothing_window, 
                            verbose=True).run_analysis()       
                
                #Perfomer calclulation of uncertainties.
                if self.run_uncertainties:
                    pkl1 = Compute_Uncertainty(pkl, smoothing_mode='savgol',
                      smoothing_window=self.smoothing_window,
                      N_MC_runs=self.N_MC_runs, verbose=True).run_uncertainties()

                
                ##Temp comparison - can be deleted
                #Perform feature analysis.
                print 'New calc', pkl1['pEW_f6']
                
                pkl2 = analyse_spectra(pkl, smoothing_mode='savgol',
                            smoothing_window=self.smoothing_window, 
                            verbose=True).run_analysis()       
                
                #Perfomer calclulation of uncertainties.
                if self.run_uncertainties:
                    pkl2 = uncertainty(pkl, smoothing_mode='savgol',
                      smoothing_window=self.smoothing_window,
                      N_MC_runs=self.N_MC_runs, verbose=True).run_uncertainties()                
                
                print 'Old calc', pkl2['pEW_f6']
                ##

                      
                pkl.to_pickle(file_path)
                
        with open(file_path, 'r') as inp:
            pkl = cPickle.load(inp)                                        

